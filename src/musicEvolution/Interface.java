/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package musicEvolution;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.Observable;
import java.util.Observer;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.Sequence;
import javax.sound.midi.Sequencer;
import javax.sound.midi.Track;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import musicEvolution.Interfaces.NouvellePop1;

/**
 *
 * @author Drap_housse
 */
public class Interface extends javax.swing.JFrame implements Observer {

    private Sequence sequence;
    private Sequencer seq;
    private FileNameExtensionFilter filter;
    private Modele m;
    private int currentIndex = 0;
    private int currentNote = 0;
    private int currentGen = 1;
    /**
     * Creates new form Interface
     */
    
   
    void OuvrirFichier(String filename) {
        try {
            File file = new File(filename);
            System.out.println("Ouverture du fichier MIDI");
            sequence = MidiSystem.getSequence(file);
            try {
                seq.setSequence(sequence);
                seq.start();
            } catch (Exception e) {
                System.out.println("Problème de lancement du Séquenceur");
            }
        } catch (Exception e) {
            System.out.println("Problème : Absence de Sequence Lors de l'ouverture du fichier");
        }
    }
     public Interface(Modele _m) {
        // Obtenir la résolution de l'écran
       Toolkit kit = Toolkit.getDefaultToolkit();
       Dimension screenSize = kit.getScreenSize();
       int screenHeight = screenSize.height;
       int screenWidth = screenSize.width;
       
       m = _m;
       m.addObserver(this);
       m.demarre();
 
       // Centrer la fenêtre dans l'écran
       setSize(screenWidth / 2, screenHeight / 2);
       setLocation(screenWidth / 4, screenHeight / 4);
       
       
        initComponents();
        jTextField_Indnumber.setText(Integer.toString(currentIndex+1));
        jTextField_Gennumb.setText(Integer.toString(currentGen));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton4 = new javax.swing.JToggleButton();
        jTextField_Indnumber = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_affichage = new javax.swing.JTextArea();
        jButton_Next = new javax.swing.JButton();
        jButton_Prev = new javax.swing.JButton();
        jLabel_Rate = new javax.swing.JLabel();
        jLabel_Indnum = new javax.swing.JLabel();
        jButton_Newpop = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_Recap = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton_Play = new javax.swing.JButton();
        jTextField_Gennumb = new javax.swing.JTextField();
        jLabel_Indnum1 = new javax.swing.JLabel();
        jSlider_Position = new javax.swing.JSlider();
        jMenuBar_princpal = new javax.swing.JMenuBar();
        jMenu_Fichier = new javax.swing.JMenu();
        jMenu_Newpop = new javax.swing.JMenuItem();
        jMenu_Openind = new javax.swing.JMenuItem();
        jMenu_Saveas = new javax.swing.JMenuItem();
        jMenu_SaveasInd = new javax.swing.JMenuItem();
        jMenu_Exit = new javax.swing.JMenuItem();
        jMenu_edit = new javax.swing.JMenu();

        jToggleButton4.setText("3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MusicEvolution 2k16");
        setAutoRequestFocus(false);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusCycleRoot(false);
        setName("MainFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(487, 410));
        setResizable(false);

        jTextField_Indnumber.setEditable(false);
        jTextField_Indnumber.setBorder(null);

        jTextArea_affichage.setEditable(false);
        jTextArea_affichage.setColumns(20);
        jTextArea_affichage.setRows(1);
        jTextArea_affichage.setAutoscrolls(false);
        jScrollPane1.setViewportView(jTextArea_affichage);

        jButton_Next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/musicEvolution/Images/resultset-dernier-icone-7114-32.png"))); // NOI18N
        jButton_Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_NextActionPerformed(evt);
            }
        });

        jButton_Prev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/musicEvolution/Images/resultset-premier-icone-4160-32.png"))); // NOI18N
        jButton_Prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_PrevActionPerformed(evt);
            }
        });

        jLabel_Rate.setText("Note :");

        jLabel_Indnum.setText("Individu n°");

        jButton_Newpop.setText("Générer Nouvelle population");
        jButton_Newpop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_NewpopActionPerformed(evt);
            }
        });

        jScrollPane2.setBorder(null);
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTable_Recap.setAutoCreateRowSorter(true);
        jTable_Recap.setBackground(new java.awt.Color(240, 240, 240));
        jTable_Recap.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jTable_Recap.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(1), null},
                { new Integer(2), null},
                { new Integer(3), null},
                { new Integer(4), null},
                { new Integer(5), null},
                { new Integer(6), null},
                { new Integer(7), null},
                { new Integer(8), null},
                { new Integer(9), null},
                { new Integer(10), null}
            },
            new String [] {
                "Individu n°", "Note"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Recap.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jTable_Recap.setAutoscrolls(false);
        jTable_Recap.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable_Recap.setEnabled(false);
        jTable_Recap.setFillsViewportHeight(true);
        jTable_Recap.setIntercellSpacing(new java.awt.Dimension(10, 1));
        jTable_Recap.setRowHeight(20);
        jScrollPane2.setViewportView(jTable_Recap);

        jLabel1.setText("Récapitulatif :");

        jButton1.setText("1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("4");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("5");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton_Play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/musicEvolution/Images/jouer-a-droite-fleche-icone-6822-32.png"))); // NOI18N
        jButton_Play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_PlayActionPerformed(evt);
            }
        });

        jTextField_Gennumb.setEditable(false);
        jTextField_Gennumb.setBorder(null);

        jLabel_Indnum1.setText("Génération n°");

        jMenu_Fichier.setText("Fichier ");

        jMenu_Newpop.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenu_Newpop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/musicEvolution/Images/fichier-nouveau-icone-3896-32.png"))); // NOI18N
        jMenu_Newpop.setText("Nouvelle Population");
        jMenu_Newpop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_NewpopActionPerformed(evt);
            }
        });
        jMenu_Fichier.add(jMenu_Newpop);

        jMenu_Openind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenu_Openind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/musicEvolution/Images/blanc-fichier-un-dossier-icone-9522-32.png"))); // NOI18N
        jMenu_Openind.setText("Ouvrir Individu...");
        jMenu_Openind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_OpenindActionPerformed(evt);
            }
        });
        jMenu_Fichier.add(jMenu_Openind);

        jMenu_Saveas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenu_Saveas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/musicEvolution/Images/disque-charger-sauvegarder-icone-9402-32.png"))); // NOI18N
        jMenu_Saveas.setText("Enregistrer population sous ...");
        jMenu_Saveas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_SaveasActionPerformed(evt);
            }
        });
        jMenu_Fichier.add(jMenu_Saveas);

        jMenu_SaveasInd.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenu_SaveasInd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/musicEvolution/Images/disque-charger-sauvegarder-icone-9402-32.png"))); // NOI18N
        jMenu_SaveasInd.setText("Enregistrer individu sous...");
        jMenu_SaveasInd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_SaveasIndActionPerformed(evt);
            }
        });
        jMenu_Fichier.add(jMenu_SaveasInd);

        jMenu_Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenu_Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/musicEvolution/Images/sortir-session-icone-5274-32.png"))); // NOI18N
        jMenu_Exit.setText("Fermer ");
        jMenu_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_ExitActionPerformed(evt);
            }
        });
        jMenu_Fichier.add(jMenu_Exit);

        jMenuBar_princpal.add(jMenu_Fichier);

        jMenu_edit.setText("Edition");
        jMenuBar_princpal.add(jMenu_edit);

        setJMenuBar(jMenuBar_princpal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton_Newpop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel_Indnum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_Indnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel_Indnum1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_Gennumb, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSlider_Position, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton_Prev, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_Play, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
<<<<<<< HEAD
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel_Rate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton5))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel_Indnum)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField_Indnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel_Indnum1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField_Gennumb, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
=======
                                .addComponent(jLabel_Rate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
>>>>>>> b747c81ae4bdd3fbbd2a9e723424b2785cc92691
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton_Next, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_Indnumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Indnum)
                    .addComponent(jLabel1)
                    .addComponent(jTextField_Gennumb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Indnum1))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSlider_Position, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_Prev, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton_Play, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton_Next, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(9, 9, 9)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_Rate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(jButton4)
                            .addComponent(jButton5))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_Newpop, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu_NewpopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu_NewpopActionPerformed
        NouvellePop1 param = new NouvellePop1();
        param.setVisible(true);
    }//GEN-LAST:event_jMenu_NewpopActionPerformed

    private void jMenu_SaveasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu_SaveasActionPerformed
        try {
            MidiGeneratorHelper midi  = new MidiGeneratorHelper();
            midi.Init();
            JFileChooser chooser = new JFileChooser();
            // Dossier Courant
            chooser.setCurrentDirectory(new File("." + File.separator));
            //Affichage et récupération de la réponse de l'utilisateur
            int reponse = chooser.showDialog(chooser, "Enregistrer sous");
            System.out.println(reponse);
            // Si l'utilisateur clique sur OK
            if (reponse == JFileChooser.APPROVE_OPTION) {
                // Récupération du chemin du fichier
                String fichier = chooser.getSelectedFile().toString();
                //Ecriture du fichier
                File fb = new File(fichier); 
                fb.mkdirs(); 
                String Rep = chooser.getSelectedFile().toString();
                System.out.println(fichier);
                for (int j=0; j<10;j++){
                    midi.ChoisirInstrument(m.getPopulation().getIndividu(j).getInstrument());    
                    for(int i = 0 ; i < m.getPopulation().getIndividu(j).getNbNotesTrack() ; i++)
                    {
                        midi.AjouterNote(m.getPopulation().getIndividu(j).getNote(i));
                    }
                    midi.EnregistrerFichier(Rep+"\\"+Integer.toString(j)+".midi");
                }
                
            }
        } catch (HeadlessException he) {
        }
    }//GEN-LAST:event_jMenu_SaveasActionPerformed

    @SuppressWarnings("empty-statement")
    private void jButton_NewpopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_NewpopActionPerformed
        int numero_instru = m.getPopulation().getIndividu(currentIndex).getInstrument();
        System.out.println(fitness_rempli());
        System.out.println(currentIndex);
        if((currentIndex == 9) && fitness_rempli()==true )
        {
            jTextArea_affichage.setText("");
            currentGen += 1;
            currentIndex = 0;
            m.continu();
            jTextField_Indnumber.setText("1");
            jTextField_Gennumb.setText(Integer.toString(currentGen));
            for(int i=0;i<10;i++){
                jTable_Recap.setValueAt("", i, 1);
            }
            if(numero_instru>=1 && numero_instru<=8){
                    jTextArea_affichage.setText("Instrument : Piano\n");
                }
                else if(numero_instru>=9 && numero_instru<=16){
                    jTextArea_affichage.setText("Instrument : Chromatic Percussion\n");
                }
                else if(numero_instru>=17 && numero_instru<=24){
                    jTextArea_affichage.setText("Instrument : Organ\n");
                }
                else if(numero_instru>=25 && numero_instru<=32){
                    jTextArea_affichage.setText("Instrument : Guitar\n");
                }
                else if(numero_instru>=33 && numero_instru<=40){
                    jTextArea_affichage.setText("Instrument : Bass\n");
                }
                else if(numero_instru>=41 && numero_instru<=48){
                    jTextArea_affichage.setText("Instrument : Strings\n");
                }
                else if(numero_instru>=49 && numero_instru<=56){
                    jTextArea_affichage.setText("Instrument : Ensemble\n");
                }
                else if(numero_instru>=57 && numero_instru<=64){
                    jTextArea_affichage.setText("Instrument : Brass\n");
                }
                else if(numero_instru>=65 && numero_instru<=72){
                    jTextArea_affichage.setText("Instrument : Reed\n");
                }
                else if(numero_instru>=73 && numero_instru<=80){
                    jTextArea_affichage.setText("Instrument : Pipe\n");
                }
                else if(numero_instru>=81 && numero_instru<=88){
                    jTextArea_affichage.setText("Instrument : Synth Lead\n");
                }
                else if(numero_instru>=89 && numero_instru<=96){
                    jTextArea_affichage.setText("Instrument : Synth Pad\n");
                }
                else if(numero_instru>=97 && numero_instru<=104){
                    jTextArea_affichage.setText("Instrument : Synth Effects\n");
                }
                else if(numero_instru>=105 && numero_instru<=112){
                    jTextArea_affichage.setText("Instrument : Ethnic\n");
                }
                else if(numero_instru>=113 && numero_instru<=120){
                    jTextArea_affichage.setText("Instrument : Percussive\n");
                }
                else if(numero_instru>=121 && numero_instru<=128){
                    jTextArea_affichage.setText("Instrument : Sound Effects\n");
                }
                jTextArea_affichage.setText(jTextArea_affichage.getText().concat("\nNombre de notes : "+m.getPopulation().getIndividu(currentIndex).getNbNotesTrack()+"\n\n"));
                jTextArea_affichage.setText(jTextArea_affichage.getText().concat("\nNotes : "));
                for(int i=0; i<m.getPopulation().getIndividu(currentIndex).getNbNotesTrack();i++){
                        if(i!=10){
                            jTextArea_affichage.setText(jTextArea_affichage.getText().concat(Integer.toString(m.getPopulation().getIndividu(currentIndex).getNote(i)))+"-");
                        }
                        else{
                            jTextArea_affichage.setText(jTextArea_affichage.getText().concat(Integer.toString(m.getPopulation().getIndividu(currentIndex).getNote(i)))+"\n");
                        }
                }
        }
        else{
            jTextArea_affichage.setText(jTextArea_affichage.getText().concat("Veuillez attribuer une note à chaque mélodie\n"));
            System.err.println("Veuillez attribuer une note à chaque extrait");
        }
    }//GEN-LAST:event_jButton_NewpopActionPerformed

    private void jMenu_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenu_ExitActionPerformed

    private void jButton_NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_NextActionPerformed
        int numero_instru = m.getPopulation().getIndividu(currentIndex).getInstrument();
        if( (m.getPopulation().getIndividu(currentIndex).getFitness() != 0 ) && currentIndex < 10)
        {
            if(m.getPopulation().getIndividu(currentIndex).getFitness() != 0 )
            {
                if(currentIndex < 9)
                {
                    jTextArea_affichage.setText("");
                    jTextField_Indnumber.setText(Integer.toString(currentIndex+2));
                    if(numero_instru>=1 && numero_instru<=8){
                        jTextArea_affichage.setText("Instrument : Piano\n");
                    }
                    else if(numero_instru>=9 && numero_instru<=16){
                        jTextArea_affichage.setText("Instrument : Chromatic Percussion\n");
                    }
                    else if(numero_instru>=17 && numero_instru<=24){
                        jTextArea_affichage.setText("Instrument : Organ\n");
                    }
                    else if(numero_instru>=25 && numero_instru<=32){
                        jTextArea_affichage.setText("Instrument : Guitar\n");
                    }
                    else if(numero_instru>=33 && numero_instru<=40){
                        jTextArea_affichage.setText("Instrument : Bass\n");
                    }
                    else if(numero_instru>=41 && numero_instru<=48){
                        jTextArea_affichage.setText("Instrument : Strings\n");
                    }
                    else if(numero_instru>=49 && numero_instru<=56){
                        jTextArea_affichage.setText("Instrument : Ensemble\n");
                    }
                    else if(numero_instru>=57 && numero_instru<=64){
                        jTextArea_affichage.setText("Instrument : Brass\n");
                    }
                    else if(numero_instru>=65 && numero_instru<=72){
                        jTextArea_affichage.setText("Instrument : Reed\n");
                    }
                    else if(numero_instru>=73 && numero_instru<=80){
                        jTextArea_affichage.setText("Instrument : Pipe\n");
                    }
                    else if(numero_instru>=81 && numero_instru<=88){
                        jTextArea_affichage.setText("Instrument : Synth Lead\n");
                    }
                    else if(numero_instru>=89 && numero_instru<=96){
                        jTextArea_affichage.setText("Instrument : Synth Pad\n");
                    }
                    else if(numero_instru>=97 && numero_instru<=104){
                        jTextArea_affichage.setText("Instrument : Synth Effects\n");
                    }
                    else if(numero_instru>=105 && numero_instru<=112){
                        jTextArea_affichage.setText("Instrument : Ethnic\n");
                    }
                    else if(numero_instru>=113 && numero_instru<=120){
                        jTextArea_affichage.setText("Instrument : Percussive\n");
                    }
                    else if(numero_instru>=121 && numero_instru<=128){
                        jTextArea_affichage.setText("Instrument : Sound Effects\n");
                    }
                    jTextArea_affichage.setText(jTextArea_affichage.getText().concat("\nNombre de notes : "+m.getPopulation().getIndividu(currentIndex).getNbNotesTrack()+"\n\n"));
                    jTextArea_affichage.setText(jTextArea_affichage.getText().concat("\nNotes : "));
                    for(int i=0; i<m.getPopulation().getIndividu(currentIndex).getNbNotesTrack();i++){
                        if(i!=10){
                            jTextArea_affichage.setText(jTextArea_affichage.getText().concat(Integer.toString(m.getPopulation().getIndividu(currentIndex).getNote(i)))+"-");
                        }
                        else{
                            jTextArea_affichage.setText(jTextArea_affichage.getText().concat(Integer.toString(m.getPopulation().getIndividu(currentIndex).getNote(i)))+"\n");
                        }
                    }
                }
                jTable_Recap.setValueAt(m.getPopulation().getIndividu(currentIndex).getFitness() , currentIndex, 1);
            }
            if(currentIndex<9)
            {
                System.out.println(currentIndex);
                currentIndex++;
                System.out.println(currentIndex);
            }
        }
        else if(m.getPopulation().getIndividu(currentIndex).getFitness()==0){
           jTextArea_affichage.setText(jTextArea_affichage.getText().concat("Veuillez noter l'extrait avant de passer au suivant\n"));
           System.err.println("Veuillez Noter l'extrait avant de passer au suivant");
        }        
    }//GEN-LAST:event_jButton_NextActionPerformed

    private void jMenu_OpenindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu_OpenindActionPerformed
        try {
            // Filtre MIDI
            filter = new FileNameExtensionFilter("Fichiers .MIDI", "midi");
            JFileChooser chooser = new JFileChooser();
            // Dossier Courant
            chooser.setCurrentDirectory(new File("." + File.separator));
            chooser.setFileFilter(filter);
            chooser.setAcceptAllFileFilterUsed(false);
            //Affichage et récupération de la réponse de l'utilisateur
            int reponse = chooser.showDialog(chooser, "Ouvrir...");
            System.out.println(reponse);
            // Si l'utilisateur clique sur OK
            if (reponse == JFileChooser.APPROVE_OPTION) {
                // Récupération du chemin du fichier
                String fichier = chooser.getSelectedFile().toString();
                //Ouverture du fichier
                System.out.println(fichier);
                jTextArea_affichage.setText("");
                jTextField_Indnumber.setText("1");
                jTextField_Gennumb.setText("1");
                currentIndex=0;
                for(int i=0;i<10;i++){
                    jTable_Recap.setValueAt("", i, 1);
                }
                for(int i = 0; i<10;i++){
                    
                }
                OuvrirFichier(fichier);
            }
        } catch (HeadlessException he) {
            System.out.println("Problème lors de l'ouverture du fichier");
        }
    }//GEN-LAST:event_jMenu_OpenindActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        currentNote = 1;
        m.getPopulation().getIndividu(currentIndex).setFitness(1);
        jTable_Recap.setValueAt(m.getPopulation().getIndividu(currentIndex).getFitness() , currentIndex, 1);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        currentNote = 2;
        m.getPopulation().getIndividu(currentIndex).setFitness(2);
        jTable_Recap.setValueAt(m.getPopulation().getIndividu(currentIndex).getFitness() , currentIndex, 1);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        currentNote = 3;
        m.getPopulation().getIndividu(currentIndex).setFitness(3);
        jTable_Recap.setValueAt(m.getPopulation().getIndividu(currentIndex).getFitness() , currentIndex, 1);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        currentNote = 4;
        m.getPopulation().getIndividu(currentIndex).setFitness(4);
        jTable_Recap.setValueAt(m.getPopulation().getIndividu(currentIndex).getFitness() , currentIndex, 1);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        currentNote = 5;
        m.getPopulation().getIndividu(currentIndex).setFitness(5);
        jTable_Recap.setValueAt(m.getPopulation().getIndividu(currentIndex).getFitness() , currentIndex, 1);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton_PrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_PrevActionPerformed
        int numero_instru = m.getPopulation().getIndividu(currentIndex).getInstrument();
        if(currentIndex==0)
        {
            jTextArea_affichage.setText(jTextArea_affichage.getText().concat("Vous ne pouvez pas revenir sur la piste précédente\n"));
        }
        else if (currentNote < 9 && currentNote > 0){
            jTextField_Indnumber.setText(Integer.toString(currentIndex));
                if(numero_instru>=1 && numero_instru<=8){
                    jTextArea_affichage.setText("Instrument : Piano\n");
                }
                else if(numero_instru>=9 && numero_instru<=16){
                    jTextArea_affichage.setText("Instrument : Chromatic Percussion\n");
                }
                else if(numero_instru>=17 && numero_instru<=24){
                    jTextArea_affichage.setText("Instrument : Organ\n");
                }
                else if(numero_instru>=25 && numero_instru<=32){
                    jTextArea_affichage.setText("Instrument : Guitar\n");
                }
                else if(numero_instru>=33 && numero_instru<=40){
                    jTextArea_affichage.setText("Instrument : Bass\n");
                }
                else if(numero_instru>=41 && numero_instru<=48){
                    jTextArea_affichage.setText("Instrument : Strings\n");
                }
                else if(numero_instru>=49 && numero_instru<=56){
                    jTextArea_affichage.setText("Instrument : Ensemble\n");
                }
                else if(numero_instru>=57 && numero_instru<=64){
                    jTextArea_affichage.setText("Instrument : Brass\n");
                }
                else if(numero_instru>=65 && numero_instru<=72){
                    jTextArea_affichage.setText("Instrument : Reed\n");
                }
                else if(numero_instru>=73 && numero_instru<=80){
                    jTextArea_affichage.setText("Instrument : Pipe\n");
                }
                else if(numero_instru>=81 && numero_instru<=88){
                    jTextArea_affichage.setText("Instrument : Synth Lead\n");
                }
                else if(numero_instru>=89 && numero_instru<=96){
                    jTextArea_affichage.setText("Instrument : Synth Pad\n");
                }
                else if(numero_instru>=97 && numero_instru<=104){
                    jTextArea_affichage.setText("Instrument : Synth Effects\n");
                }
                else if(numero_instru>=105 && numero_instru<=112){
                    jTextArea_affichage.setText("Instrument : Ethnic\n");
                }
                else if(numero_instru>=113 && numero_instru<=120){
                    jTextArea_affichage.setText("Instrument : Percussive\n");
                }
                else if(numero_instru>=121 && numero_instru<=128){
                    jTextArea_affichage.setText("Instrument : Sound Effects\n");
                }
                jTextArea_affichage.setText(jTextArea_affichage.getText().concat("\nNombre de notes : "+m.getPopulation().getIndividu(currentIndex).getNbNotesTrack()+"\n\n"));
                jTextArea_affichage.setText(jTextArea_affichage.getText().concat("\nNotes : "));
                for(int i=0; i<m.getPopulation().getIndividu(currentIndex).getNbNotesTrack();i++){
                        if(i!=10){
                            jTextArea_affichage.setText(jTextArea_affichage.getText().concat(Integer.toString(m.getPopulation().getIndividu(currentIndex).getNote(i)))+"-");
                        }
                        else{
                            jTextArea_affichage.setText(jTextArea_affichage.getText().concat(Integer.toString(m.getPopulation().getIndividu(currentIndex).getNote(i)))+"\n");
                        }
                }
            currentIndex--;
        }
        else if(currentIndex == 9){
            currentIndex--;
        }
    }//GEN-LAST:event_jButton_PrevActionPerformed

    private void jButton_PlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_PlayActionPerformed
        // Crée la piste midi pour l'individu courant
    MidiGeneratorHelper midi = new MidiGeneratorHelper();
    midi.Init();
    midi.ChoisirInstrument(m.getPopulation().getIndividu(currentIndex).getInstrument());    
        for(int i = 0 ; i < m.getPopulation().getIndividu(currentIndex).getNbNotesTrack() ; i++)
        {
            midi.AjouterNote(m.getPopulation().getIndividu(currentIndex).getNote(i));
        }
        midi.Play();     
    }//GEN-LAST:event_jButton_PlayActionPerformed

    private void jMenu_SaveasIndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu_SaveasIndActionPerformed
        try {
            MidiGeneratorHelper midi  = new MidiGeneratorHelper();
            midi.Init();
            JFileChooser chooser = new JFileChooser();
            // Dossier Courant
            chooser.setCurrentDirectory(new File("." + File.separator));
            //Affichage et récupération de la réponse de l'utilisateur
            int reponse = chooser.showDialog(chooser, "Enregistrer sous");
            System.out.println(reponse);
            // Si l'utilisateur clique sur OK
            if (reponse == JFileChooser.APPROVE_OPTION) {
                // Récupération du chemin du fichier
                String fichier = chooser.getSelectedFile().toString();
                //Ecriture du fichier
                fichier = fichier + ".midi";
                midi.ChoisirInstrument(m.getPopulation().getIndividu(currentIndex).getInstrument());    
                for(int i = 0 ; i < m.getPopulation().getIndividu(currentIndex).getNbNotesTrack() ; i++)
                {
                    midi.AjouterNote(m.getPopulation().getIndividu(currentIndex).getNote(i));
                }
                midi.EnregistrerFichier(fichier);
                }
                
            
        } catch (HeadlessException he) {
        }
    }//GEN-LAST:event_jMenu_SaveasIndActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Interface().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton_Newpop;
    private javax.swing.JButton jButton_Next;
    private javax.swing.JButton jButton_Play;
    private javax.swing.JButton jButton_Prev;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_Indnum;
    private javax.swing.JLabel jLabel_Indnum1;
    private javax.swing.JLabel jLabel_Rate;
    private javax.swing.JMenuBar jMenuBar_princpal;
    private javax.swing.JMenuItem jMenu_Exit;
    private javax.swing.JMenu jMenu_Fichier;
    private javax.swing.JMenuItem jMenu_Newpop;
    private javax.swing.JMenuItem jMenu_Openind;
    private javax.swing.JMenuItem jMenu_Saveas;
    private javax.swing.JMenuItem jMenu_SaveasInd;
    private javax.swing.JMenu jMenu_edit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSlider_Position;
    private javax.swing.JTable jTable_Recap;
    private javax.swing.JTextArea jTextArea_affichage;
    private javax.swing.JTextField jTextField_Gennumb;
    private javax.swing.JTextField jTextField_Indnumber;
    private javax.swing.JToggleButton jToggleButton4;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
    
    public boolean fitness_rempli(){
        for(int j=0;j<10;j++){
            if((m.getPopulation().getIndividu(j).getFitness()) == 0){
                return false;
            }
        }        
        return true;
    }
}
